---
description: RiverpodによるFeature Firstアーキテクチャ
globs: *
alwaysApply: true
---

## 概要

このドキュメントは、実際のプロジェクト分析に基づく現在のプロジェクト構造とアーキテクチャパターンの概要を説明します。Flutterのベストプラクティスを適用しながら一貫性を維持するために、これらのガイドラインに従ってください。

## アーキテクチャの概要

- Riverpod状態管理を使用したFeature-firstアーキテクチャ
- Hooksベースのウィジェット構成
- クリーンアーキテクチャに触発された層（エンティティ、リポジトリ、ユースケース）
- バックエンドサービスにFirebase
- ローカル永続化にSharedPreferences
- API通信にRetrofit
- pedantic_monoとcustom_lintによる静的解析

## プロジェクト構造

```
lib/
  ├── features/           // 機能モジュール
  │   ├── account/       // アカウント関連機能
  │   ├── authentication/// 認証機能
  │   ├── github_users/  // GitHubユーザー機能
  │   ├── home/         // ホーム画面機能
  │   ├── memo/         // メモ機能
  │   ├── setting/      // 設定機能
  │   ├── timeline/     // タイムライン機能
  │   └── ...          // その他の機能モジュール
  ├── core/             // コア機能
  │   ├── entities/     // ドメインエンティティ
  │   ├── repositories/ // リポジトリインターフェース
  │   ├── use_cases/    // ビジネスロジック
  │   ├── exceptions/   // カスタム例外
  │   ├── extensions/   // 拡張メソッド
  │   ├── utils/        // ユーティリティ関数
  │   ├── widgets/      // 共有ウィジェット
  │   ├── router/       // ナビゲーションルーティング
  │   ├── res/          // リソース（生成済み）
  │   └── custom_hooks/ // カスタムFlutterフック
  ├── app.dart          // アプリ構成
  └── main.dart         // エントリーポイント
```

## パッケージ依存関係

### コア依存関係

- Flutter SDK (>=3.4.0)
- flutter_localizations
- cupertino_icons

### 状態管理とUI

- hooks_riverpod
- riverpod_annotation
- flutter_hooks
- go_router（ナビゲーション）

### Firebaseサービス

- firebase_core
- firebase_analytics
- cloud_firestore
- firebase_auth
- firebase_storage
- cloud_functions
- firebase_messaging
- firebase_crashlytics
- firebase_remote_config

### データ管理

- shared_preferences
- retrofit
- dio
- freezed_annotation
- json_annotation
- equatable

### UIコンポーネントと機能

- pull_to_refresh_flutter3
- extended_image
- flutter_svg
- flutter_slidable
- adaptive_dialog
- page_transition
- flutter_inappwebview
- url_launcher
- map_launcher
- image_picker
- image_cropper
- flutter_local_notifications

### 開発依存関係

- pedantic_mono
- custom_lint
- riverpod_lint
- json_serializable
- build_runner
- freezed
- riverpod_generator
- retrofit_generator
- flutter_gen_runner

## 状態管理ガイドライン

1. @riverpodアノテーションを使用したRiverpodを使用する
2. riverpod_generatorに適切なNotifierクラスを決定させる
3. ローカルストレージにはSharedPreferencesを使用する
4. Freezedを使用して適切な状態の不変性パターンに従う
5. 適切なプロバイダースコープを使用する

## 機能の構成

1. 各機能はfeatures/ディレクトリ下の独自のディレクトリに自己完結している必要がある
2. 機能の構造には以下を含める：
   - pages/（UI画面）
   - widgets/（機能固有のウィジェット）
   - providers/（状態管理）
   - repositories/（データアクセス）
   - entities/（機能固有のエンティティ）

## コア層のガイドライン

1. コア機能は適切なcore/サブディレクトリに配置する
2. 共有ウィジェットはcore/widgets/に配置する
3. ビジネスロジックはcore/use_cases/に配置する
4. ドメインエンティティはcore/entities/に配置する
5. リポジトリインターフェースはcore/repositories/に配置する

## コード生成

1. コード生成にはbuild_runnerを使用する：
   ```bash
   flutter pub run build_runner build
   ```
2. 以下のためのコードを生成する：
   - Freezedモデル
   - Riverpodプロバイダー
   - Retrofit APIクライアント
   - JSONシリアライゼーション
   - FlutterGenリソース

## テストガイドライン

1. テストはtestディレクトリに配置する
2. ビジネスロジックのユニットテストを作成する
3. UIコンポーネントのウィジェットテストを実装する
4. 依存関係のモック化にはmockitoを使用する

## パフォーマンスガイドライン

1. extended_imageで適切な画像キャッシュを実装する
2. pull_to_refresh_flutter3でリストビューを最適化する
3. 適切な状態管理パターンに従う
4. 適切なFirebaseキャッシュ戦略を実装する

## 命名ガイドライン

1. 一貫したケーシングに従う：

   - ディレクトリ名：snake_case
   - ファイル名：snake_case
   - クラス名：UpperCamelCase
   - 変数名：camelCase

2. 機能固有の命名：

   - ページ：NounPage（例：HomePage）
   - コンポーネント：NounComponent（例：UserCard）
   - モデル：NounModel（例：UserModel）
   - プロバイダー：NounProvider（例：UserProvider）
   - リポジトリ：NounRepository（例：UserRepository）

3. 一般原則：
   - エンティティには名詞または形容詞を使用する
   - アクションには動詞を使用する
   - 命名には複数形を考慮する
   - 名前は明確で説明的にする

## 静的解析

1. pedantic_monoのlintルールに従う
2. 追加のチェックにはcustom_lintを使用する
3. Riverpod固有のルールにはriverpod_lintを使用する
4. すべての解析警告を修正する
5. 適切なNull安全パターンを使用する
